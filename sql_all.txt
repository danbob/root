2. Zmiana nazwy tabeli (z 'osoby' na 'people')
ALTER TABLE osoby
RENAME TO people;

2. Zmiana nazwy tabeli (z 'people' na 'osoby')
ALTER TABLE people
RENAME TO osoby;

3. Wypisanie atrybutów tabeli 'people'
SELECT * FROM people;

3. Wypisanie atrybutów z tabeli 'osoby'
SELECT * FROM osoby;

11. Dodanie kolumny do istniej¹cej tabeli
ALTER TABLE osoby
ADD people VARCHAR(10);

14. Usuniêcie kolumny
ALTER TABLE osoby
DROP COLUMN people;

11. Dodanie kolumny do istniej¹cej tabeli
ALTER TABLE osoby
ADD age NUMBER(2);

14. Usuniêcie kolumny
ALTER TABLE osoby
DROP COLUMN age;

Aktualizacja tabeli
UPDATE osoby
SET imie2 = '-'
WHERE imie2 IS NULL;

12. Zmodyfikowanie istniej¹cej kolumny o stwierdzenie NOT NULL
ALTER TABLE osoby
MODIFY imie2
VARCHAR2(15) NOT NULL;

16. Wyœwietliæ pierwsze/ostatnie alfabetycznie nazwisko
SELECT MAX(nazwisko)
FROM osoby;

17. Z tabeli osoby wyœwietliæ nazwiska pisane du¿ymi literami a imie1 pisane z du¿ej litery
SELECT UPPER(nazwisko), INITCAP(imie1)
FROM osoby;

18. W tabeli osoby zmodyfikowaæ nazwisko na pisane wielkimi literami dla osób, których id to 1, 2
UPDATE osoby
SET nazwisko = UPPER(nazwisko)
WHERE id IN (1, 2);

19. W tabeli osoby zmodyfikowaæ nazwisko na pisane z du¿ej litery, a imie1 na pisane wielkimi literami dla osoby o id=3
UPDATE osoby
SET nazwisko = INITCAP(nazwisko),
imie1 = UPPER(imie1)
WHERE id = 3;

20. Wybraæ dane osobowe osób, których nazwiska wpisane s¹ ma³ymi literami
SELECT * FROM osoby
WHERE nazwisko = LOWER(nazwisko);

21. Wyznaczyæ dane osobowe osób, które w nazwisku posiadaj¹ na drugiej pozycji literê 'o'
SELECT * FROM osoby
WHERE LOWER(nazwisko) LIKE '_o%';

22. Wyœwietliæ dane wszystkich wydzia³ów, które wewn¹trz nazwy zawieraj¹ literê 'a'
SELECT nazwa from wydzialy
where nazwa like '%a%';

23. Wybraæ dane osobowe i w miejsce brakuj¹cego drugiego imienia wpisaæ tekst 'brak'
SELECT nazwisko, NVL(imie2, 'brak')
from osoby;

24. Wypisaæ ró¿ne nazwiska z tabeli 'osoby' wyrównane do prawej strony (20 znaków)
SELECT LPAD(nazwisko, 20, ' ') AS nazwisko, LPAD(imie1, 20, ' ') AS imie1
FROM osoby;

25. Wypisaæ ró¿ne drugie litery z nazwiska w tabeli 'osoby' oraz d³ugoœæ pierwszego i drugiego imienia
SELECT SUBSTR(nazwisko, 2, 1), (LENGTH(imie1) + LENGTH(imie2)) FROM osoby;

26. Wybraæ id, nazwisko, imie1, plec tak, aby zamiast 'K' wyœwietla³o 'kobieta', a zamiast 'M' 'mezczyzna'
SELECT id, nazwisko, imie1, 
CASE WHEN plec = 'K' THEN 'Kobieta'
ELSE 'Mezczyzna'
END AS plec
FROM osoby;

27. Wyœwietliæ dane wszystkich osób, które urodzi³y siê po 01.01.1983 roku
SELECT * FROM osoby
WHERE data_ur < TO_DATE('01/01/1983', 'dd/mm/yyyy');

29. Wyœwietlenie samego roku urodzenia
SELECT EXTRACT(YEAR FROM data_ur)
FROM osoby;

30. Wyœwietliæ dane dla wierszy, gdzie w dacie 'do' rok jest mniejszy jak 2012
select * from zatrudnienia
where to_number(extract(year from do)) < 2012;

31. Z tabeli 'pensje' wyœwietliæ id_osoby oraz jej œredni¹ pensjê, max pensjê, zliczyæ wiersze i pogrupowaæ wg id_osoby
select id_osoby, avg(pensja), max(pensja), sum(case when do is null then 1 else 0 end)
from pensje
group by id_osoby;

32. Osoby obecnie zatrudnione
select osoby.* from osoby, zatrudnienia
where osoby.id = zatrudnienia.id_osoby
and zatrudnienia.do is null;

33. Osoby maj¹ce aktualn¹ pensjê
select osoby.id, pensje.pensja, pensje.do from osoby, pensje
where osoby.id = pensje.id_osoby
and pensje.do is null;

34. Najpierw zliczyæ pensje i pogrupowaæ po id_osoby
select id_osoby, count(pensja)
from pensje
group by id_osoby;

35. Z tabeli pensje wyœwietliæ id_osoby jej œredni¹ pensjê, max pensjê, zliczyæ wiersze gdzie nie ma okreœlonej daty koñca wyp³acania pensji (czyli same aktualne pensje) i pogrupowaæ wg id_osoby
select id_osoby, avg(pensja), max(pensja), count(pensja)
from pensje
where do is null
and pensja > (select avg(pensja) from pensje)
group by id_osoby;

37. Wyœwietliæ dla ka¿dej osoby id_osoby i zliczyæ dla niej œredni¹ pensjê dla osób maj¹cych pensjê powy¿ej i posortowaæ wynik wed³ug œredniej
select id_osoby, avg(pensja)
from pensje
where pensja > (select avg(pensja) from pensje)
group by id_osoby
order by avg(pensja) desc;

38. Wyœwietliæ d³ugoœæ nazwiska
select length(nazwisko) from osoby;

40. Z tabeli osoby wyœwietliæ ³¹cznie jako jedn¹ kolumnê atrybuty imie1 i nazwisko nazywaj¹c now¹ kolumnê dane, sprawdziæ czy posiadane jest imie2 jeœli nie wpisaæ brak, wyœwietliæ datê urodzenia, a w kolumnie plec w zale¿noœci od oznaczenia wpisaæ kobieta mê¿czyzna lub ?
select imie1 || ' ' || nazwisko as dane, NVL(imie2, 'brak'), data_ur, case
when plec = 'K'
then 'Kobieta'
when plec = 'M'
then 'Mezczyzna'
else '?'
end as plec
from osoby;

41. Wyœwietliæ dane z tabel osoby i pensje
select osoby.*, pensje.*
from osoby, pensje
where osoby.id = pensje.id_osoby;

42. Wyœwietliæ dane z dwóch tabel ³¹cz¹c wewnêtrznie na kolumnach id (pk) i id_osoby (fk)
select * from osoby
inner join pensje on osoby.id = pensje.id_osoby;

43. Wyœwietliæ dane dla osób o id 1, 2, 3 posiadaj¹cych aktualn¹ pensjê
select osoby.*
from osoby, pensje
where osoby.id = pensje.id_osoby
and osoby.id in (1, 2, 3)
and pensje.do is null;

44. Wybraæ id, nazwisko, imie1 oraz aktualn¹ pensjê
select osoby.id, osoby.nazwisko, osoby.imie1, pensje.pensja
from osoby, pensje
where osoby.id = pensje.id_osoby 
and pensje.do is null;

45. Wyœwietliæ dane osobowe wszystkich osób zatrudnionych nie posiadaj¹cych aktualnej pensji
select osoby.*
from osoby, pensje, zatrudnienia
where osoby.id = pensje.id_osoby
and osoby.id = zatrudnienia.id_osoby
and pensje.do is not null
and zatrudnienia.do is null;

46. Wybraæ wszystkie dane osób zatrudnionych aktualnie pracuj¹ce wraz z nazw¹ wydzia³u
select osoby.*, wydzialy.nazwa
from osoby, wydzialy, zatrudnienia
where osoby.id = zatrudnienia.id_osoby
and wydzialy.id = zatrudnienia.id_wydzialy
and zatrudnienia.do is null;

47. Wyznaczyæ œredni¹ pensjê aktualnie pracuj¹cych na ka¿dym wydziale i wyœwietliæ w postaci:
select avg(pensje.pensja), wydzialy.nazwa
from pensje, wydzialy, zatrudnienia, osoby
where osoby.id = pensje.id_osoby
and osoby.id = zatrudnienia.id_osoby
and wydzialy.id = zatrudnienia.id_wydzialy
and zatrudnienia.do is null
group by wydzialy.nazwa;

48. Wyznaczyæ œredni¹ wieku aktualnie pracuj¹cych pracowników dla ka¿dej p³ci
select osoby.plec, avg(FLOOR((TO_date('15/01/2020', 'dd/mm/yyyy') - osoby.data_ur)/365.25)) as age
from osoby, zatrudnienia
where osoby.id = zatrudnienia.id_osoby
and zatrudnienia.do is null
group by osoby.plec;

49. Wypisaæ aktualnego szefa
select wydzialy.nazwa, osoby.nazwisko, osoby.imie1
from osoby, wydzialy, zatrudnienia
where osoby.id = wydzialy.szef
and osoby.id = zatrudnienia.id_osoby
and zatrudnienia.do is null;

50. Wyœwietliæ dane osobowe wszystkich osob o nazwisku pisanym malymi literami
select * from osoby
where nazwisko = lower(nazwisko);

51. Dane najstarszej osoby
select * from osoby
where data_ur =
(select min(data_ur)
from osoby);

52. Wyœwietliæ dane osób dla których data urodzenia jest wiêksza od min daty urodzenia
select * from osoby
where data_ur > (select min(data_ur) from osoby);


53. Wybraæ dane osobowe osób nieposiadaj¹cych aktualnej pensji
select osoby.id, count(pensje.pensja) from osoby, pensje
where osoby.id = pensje.id_osoby
and pensje.do is not null
having count(pensje.pensja) = 1
group by osoby.id;

54. Wybraæ dane osobowe pierwszej osoby wed³ug alfabetu
select * from osoby
where nazwisko = 
(select min(nazwisko) from osoby);

55. Wybraæ dane szefów
select osoby.* from osoby, wydzialy
where osoby.id = wydzialy.szef;

56. Wyœwietliæ wszystkie dane osób, które posiadaj¹ najkrótsze nazwisko
select * from osoby
where length(nazwisko) = 
(select min(length(nazwisko))
from osoby);

57. Wydzia³ o nazwie maksymalnej dlugoœci i wypisaæ zatrudnione tam osoby
select wydzialy.nazwa, count(zatrudnienia.id_osoby)
from wydzialy, zatrudnienia
where wydzialy.id = zatrudnienia.id_wydzialy
and length(wydzialy.nazwa) =
(select max(length(wydzialy.nazwa))
from wydzialy)
group by wydzialy.nazwa;

57. Wydzia³ o nazwie maksymalnej dlugoœci i wypisaæ zatrudnione tam osoby (2)
select osoby.*, wydzialy.nazwa
from osoby, wydzialy, zatrudnienia
where osoby.id = zatrudnienia.id_osoby
and wydzialy.id = zatrudnienia.id_wydzialy
and length(wydzialy.nazwa) =
(select max(length(wydzialy.nazwa))
from wydzialy);

58. Wybraæ najm³odsz¹ osobê ju¿ niepracuj¹c¹
select osoby.*, zatrudnienia.*
from osoby, zatrudnienia
where osoby.id = zatrudnienia.id_osoby
and zatrudnienia.do is not null
and osoby.data_ur = 
(select max(osoby.data_ur) from osoby);

59. Dane najstarszego szefa
select osoby.*, wydzialy.nazwa from osoby, wydzialy
where osoby.id = wydzialy.szef
and osoby.data_ur =
(select min(osoby.data_ur) from osoby inner join
wydzialy on osoby.id = wydzialy.szef);

60. Wyznaczyæ wydzia³, na którym suma pensji jest najwiêksza
select wydzialy.nazwa, sum(pensje.pensja) from wydzialy, pensje, zatrudnienia, osoby
where wydzialy.id = zatrudnienia.id_wydzialy
and osoby.id = zatrudnienia.id_osoby
and osoby.id = pensje.id_osoby
group by wydzialy.nazwa
having sum(pensje.pensja) =
(select max(sum(pensje.pensja)) from pensje, wydzialy, osoby, zatrudnienia
where osoby.id = pensje.id_osoby
and osoby.id = zatrudnienia.id_osoby
and wydzialy.id = zatrudnienia.id_wydzialy
group by wydzialy.nazwa);

61. Wyœwietliæ najwiêksz¹ pensje aktualnie wyp³acan¹
select max(pensja) from pensje
where do is null;

62. Na którym wydziale pracuje aktualnie najwiêcej osób
select wydzialy.nazwa, count(zatrudnienia.id_osoby)
from wydzialy, zatrudnienia
where wydzialy.id = zatrudnienia.id_wydzialy
and zatrudnienia.do is null
group by wydzialy.nazwa
having count(zatrudnienia.id_osoby)=
(select max(count(zatrudnienia.id_osoby)) from wydzialy, zatrudnienia 
where wydzialy.id = zatrudnienia.id_wydzialy
and zatrudnienia.do is null
group by wydzialy.nazwa);

63. Wybraæ osoby, które nie otrzyma³y jeszcze podwy¿ki
select osoby.id from osoby, pensje
where osoby.id = pensje.id_osoby
group by osoby.id
having count(pensje.pensja) = 1;

64. Wybraæ wydzia³, który ma najstarszego szefa aktualnie pracuj¹cego
select wydzialy.nazwa from osoby, wydzialy, zatrudnienia
where osoby.id = wydzialy.szef
and zatrudnienia.do is null
and osoby.data_ur =
(select min(osoby.data_ur) from osoby inner join
wydzialy on osoby.id = wydzialy.szef)
group by wydzialy.nazwa;

65. Wyœwietliæ dane wydzia³ów posiadaj¹cych wiêcej jak 2 pracowników
select wydzialy.nazwa, count(zatrudnienia.id_osoby)
from wydzialy, zatrudnienia
where wydzialy.id = zatrudnienia.id_wydzialy
group by wydzialy.nazwa
having count(zatrudnienia.id_osoby) > 2;

66. Najstarsze osoby z ka¿dej p³ci
select * from osoby
where data_ur = 
(select min(data_ur) from osoby
where plec = 'K')
or data_ur =
(select min(data_ur) from osoby
where plec = 'M');

--------------------------------------------------------------------------------------------------------------------

--DODANIE KOLUMNY DO TABELI--
ALTER TABLE wydzialy
ADD kolumna NUMBER(2);

--MODYFIKACJA RODZAJU WPISYWANYCH WARTOŒCI W KOLUMNIE--
ALTER TABLE wydzialy
MODIFY kolumna NUMBER(5);

--USUWANIE DANEJ KOLUMNY--
ALTER TABLE wydzialy
DROP COLUMN kolumna;

??--USUWANIE WIERSZA Z TABELI O DANYM ID--??
DELETE FROM wydzialy
WHERE id=4;

--AKTUALIZACJA/ZMIANA DANYCH (NAZWISKA) W DANYM WIERSZU--
UPDATE osoby
SET nazwisko='Malinowska'
WHERE id=6;

--AKTUALIZACJA/ZMIANA DANYCH (NAZWISKA) W DANYM WIERSZU ZE ZMIAN¥ PIERWSZEJ LITERY (W KA¯DYM S£OWIE) NA DU¯¥ (INITCAP)--
UPDATE osoby
SET nazwisko=INITCAP('malinowska')
WHERE id=6;

--WYŒWIETLANIE NAZWISK Z MA£YCH LITER--
SELECT nazwisko FROM osoby
WHERE nazwisko=LOWER(nazwisko);

--WYŒWIETLANIE KA¯DEJ KOLUMNY DLA NAZWISKA 'kot' (PISANE Z MA£YCH LITER)--
SELECT * FROM osoby
WHERE LOWER(nazwisko)=LOWER('kot');

--WYŒWIETLANIE NAZWISK Z DU¯YCH LITER--
SELECT UPPER(nazwisko)
FROM osoby;

--WYŒWIETLANIE NAZWISK O PODANYCH ID--
SELECT nazwisko
FROM osoby
WHERE id IN(3, 5, 7);
--LUB--
SELECT nazwisko
FROM osoby
WHERE id=ANY(3, 5, 7);

--WYŒWIETLA NAZWISKA KOÑCZ¥CE SIÊ NA LITERÊ 'a'--
SELECT * FROM osoby
WHERE SUBSTR(nazwisko, LENGTH(nazwisko))='a';
--LUB--
SELECT * FROM osoby
WHERE nazwisko LIKE '%a';

--WYŒWIETLA NAZWISKO O OKREŒLONEJ LICZBIE ZNAKÓW ('_') ZAKOÑCZONYCH NA DAN¥ LITERÊ--
SELECT * FROM osoby
WHERE nazwisko LIKE '__t';

--PODANIE DRUGIEGO IMIENIA ORAZ ZAMIANA WARTOŒCI 'NULL' NA 'brak'--
SELECT NVL(imie2,'brak')
FROM osoby;

--PODANIE INICJA£ÓW (PO£¥CZENIE KOLUMNY NAZWISK Z IMIONAMI)--
SELECT SUBSTR(nazwisko, 1, 1) || SUBSTR(imie1, 1, 1)
AS inicialy
FROM osoby;

--ZAMIANA OZNACZENIA P£CI ('K' NA 'kobieta','M' NA 'mezczyzna')--
SELECT DECODE(plec,'K','kobieta','M','mezczyzna')
AS plec
FROM osoby;
--LUB--
SELECT REPLACE(REPLACE(plec,'M','mezczyzna'),'K','kobieta')
FROM osoby;
--LUB--
SELECT nazwisko, Case 
WHEN plec='K' THEN 'kobieta'
ELSE 'mezczyzna' END 
AS plec
FROM osoby;

--WSKAZANIE SAMEGO ROKU Z DATY URODZENIA--
SELECT
TO_CHAR(data_ur,'yyyy')
FROM osoby;

--POKAZUJE OSOBY URODZONE PRZED DAT¥--
SELECT * FROM osoby
WHERE data_ur < to_date ('10/10/1970','dd/mm/yyyy');

--POKAZUJE OSOBY URODZONE PO DACIE (Z UWZGLÊDNIENIEM RODZAJU ZNAKÓW)--
SELECT * FROM osoby
WHERE TO_NUMBER(EXTRACT(year FROM data_ur))>1970;
--LUB--
SELECT * FROM osoby
WHERE TO_NUMBER(TO_CHAR(data_ur,'yyyy'))>1970;

--OBLICZENIE ILOŒCI ZNAKÓW--
SELECT nazwisko || imie1 || ' dlugosc:' || 
(LENGTH(nazwisko) + LENGTH(imie1))
AS dlogosc
FROM osoby;

--ZLICZA ILOŒÆ WIERSZY W TABELI--
SELECT COUNT(*)
FROM pensje;

--ZLICZANIE ILOŒCI PENSJI PO ID_OSOBY--
SELECT id_osoby, COUNT(*)
FROM pensje
GROUP BY id_osoby;

--SUMA PENSJI DANEJ OSOBY--
SELECT id_osoby, SUM(pensja)
FROM pensje
GROUP BY id_osoby;

--ZLICZANIE SUMY PENSJI, GDZIE S¥ WIÊCEJ NI¯ DWIE PENSJE--
SELECT id_osoby, SUM(pensja)
FROM pensje
GROUP BY id_osoby
HAVING COUNT(*) > 1;

--WYPISANIE ID 1, 7, GDZIE MAJ¥ DWIE PENSJE--
SELECT id_osoby, SUM(pensja)
FROM pensje
WHERE id_osoby in(1, 7)
GROUP BY id_osoby
HAVING COUNT(*) > 1;

--WYŒWIETLENIE DANYCH OSOBOWYCH OSOBY 'Norek'--
SELECT * 
FROM osoby
WHERE INITCAP(nazwisko)='Norek';

--OSTATNIE NAZWISKO ALFABETYCZNIE Z TABELI--
SELECT MAX(nazwisko)
FROM osoby;

--OSTATNIE NAZWISKO ALFABETYCZNIE Z TABELI + JEJ DANE--
SELECT * FROM osoby
WHERE nazwisko=(SELECT MAX(nazwisko) FROM osoby);

--NAZWISKA ZACZYNAJ¥CE SIÊ NA MA£¥ LITERÊ--
SELECT o.* FROM osoby o
WHERE o.nazwisko IN (SELECT LOWER(nazwisko) FROM osoby);

--WYŒWIETLA NAJM£ODSZ¥ OSOBÊ Z TABELI--
SELECT o.* FROM osoby o
WHERE o.data_ur IN (SELECT MAX(data_ur) FROM osoby);

--WYŒWIETLA WSZYSTKIE OSOBY OD TEJ NAJSTARSZEJ (BEZ JEJ UWZGLÊDNIENIA)--
SELECT o.* FROM osoby o
WHERE NOT o.data_ur IN (SELECT MIN(data_ur) FROM osoby);
--LUB--
SELECT o.* FROM osoby o
WHERE o.data_ur > (SELECT MIN(data_ur) FROM osoby);

--OSOBY NIEPOSIADAJ¥CE PENSJI--
SELECT o.* FROM osoby o
WHERE o.id IN (SELECT p.id_osoby FROM pensje p WHERE p.pensja IS NULL);

--OSOBY, KTÓRE NIE MAJ¥ DATY ZATRUDNIENIA 'do'--
SELECT o.* FROM osoby o
WHERE o.id IN (SELECT p.id_osoby FROM pensje p WHERE p.do IS NULL);

--PIERWSZA OSOBA Z TABELI OSOBY--
SELECT o.* FROM osoby o
WHERE ROWNUM = 1; 

--TRZY PIERWSZE OSOBY Z TABELI OSOBY--
SELECT o.* FROM osoby o
WHERE ROWNUM <=3;

--TRZY OSOBY Z TABELI OSOBY WYMIENIONE ALFABETYCZNIE--
SELECT * FROM(SELECT * FROM osoby
ORDER BY nazwisko)
WHERE ROWNUM <= 3;

--CZTERY OSOBY Z TABELI OSOBY WYMIENIONE ALFABETYCZNIE--
SELECT * FROM(SELECT * FROM osoby
ORDER BY nazwisko DESC) 
WHERE ROWNUM <= 4;

--DANE SZEFÓW--
SELECT * FROM osoby
WHERE id IN(SELECT szef FROM wydzialy);

--DANE OSOBY, KTÓRA POSIADA NAJD£U¯SZ¥ SUMÊ IMIENIA I NAZWISKA--
SELECT o.* FROM osoby o
WHERE LENGTH(o.imie1)+LENGTH(o.nazwisko) IN(SELECT MAX(LENGTH(nazwisko) + LENGTH(imie1)) FROM osoby);

--NAJKRÓTSZA NAZWA WYDZIA£U--
SELECT w.* FROM wydzialy w
WHERE LENGTH(w.nazwa) IN(SELECT MIN(LENGTH(w1.nazwa)) FROM wydzialy w1);

--DANE NAJSTARSZEJ AKTUALNIE ZATRUDNIONEJ OSOBY--
SELECT * FROM osoby
WHERE data_ur IN(SELECT MIN(data_ur) FROM osoby INNER JOIN pensje ON osoby.id=pensje.id_osoby
WHERE pensje.do IS NOT NULL);

??--NAZWISKO OSOBY, KTÓRA MA JE NAJD£U¯SZE--??
SELECT o.* FROM osoby o
WHERE LENGTH(o.nazwisko)=ANY(SELECT MAX(LENGTH(o2.nazwisko) FROM osoby o2));

--SUMA WSZYSTKICH PENSJI--
SELECT SUM(p.pensja) FROM pensje p, zatrudnienia z
WHERE p.id_osoby=z.id_osoby;

--SUMA NAJWY¯SZYCH PENSJI ZE WSZYSTKICH WYDZIA£ÓW--
SELECT MAX(SUM(p.pensja)) FROM pensje p, zatrudnienia z
WHERE p.id_osoby=z.id_osoby
GROUP BY z.id_wydzialy;

--SUMA NAJNI¯SZYCH PENSJI ZE WSZYSTKICH WYDZIA£ÓW--
SELECT MIN(SUM(p.pensja)) FROM pensje p, zatrudnienia z
WHERE p.id_osoby=z.id_osoby
GROUP BY z.id_wydzialy;

--NAZWA WYDZIA£U, NA KTÓREJ SUMA PENSJI JEST NAJMNIEJSZA--
SELECT w.nazwa FROM wydzialy w, zatrudnienia z, pensje p
WHERE w.id=z.id_wydzialy
AND p.id_osoby=z.id_osoby
GROUP BY w.nazwa
HAVING SUM(p.pensja) IN (SELECT MIN(SUM(p2.pensja))
FROM pensje p2, zatrudnienia z2
WHERE p2.id_osoby=z2.id_osoby
GROUP BY z2.id_wydzialy);

--LISTA OSÓB ZATRUDNIONYCH NA WYDZIALE, GDZIE SUMA PENSJI JEST NAJMNIEJSZA--
SELECT * FROM osoby INNER JOIN zatrudnienia ON
zatrudnienia.id_osoby=osoby.id
WHERE zatrudnienia.id_wydzialy=
(SELECT w.id FROM wydzialy w, zatrudnienia z, pensje p
WHERE w.id=z.id_wydzialy
AND p.id_osoby=z.id_osoby
GROUP BY w.id
HAVING SUM(p.pensja) IN (SELECT MIN(SUM(p2.pensja))
FROM pensje p2, zatrudnienia z2
WHERE p2.id_osoby=z2.id_osoby
GROUP BY z2.id_wydzialy));

--DANE OSOBOWE OSOBY, KTÓRA MA NAJNI¯SZ¥ PENSJÊ--
SELECT * FROM osoby, pensje
WHERE osoby.id=pensje.id_osoby
AND pensje.pensja=
(SELECT MIN(pensja)
FROM pensje);

--NAZWA WYDZIA£U, KTÓREGO SZEF JEST NAJSTARSZY--
SELECT nazwa FROM wydzialy w
WHERE w.szef=(
SELECT id FROM osoby o
WHERE o.data_ur=(SELECT MIN(o2.data_ur) FROM osoby o2, wydzialy w2 
WHERE w2.szef=o2.id));

--NAJSTARSZA KOBIETA I NAJSTARSZY MÊ¯CZYZNA--
SELECT * FROM osoby o
WHERE o.data_ur=
(SELECT MIN(o2.data_ur) FROM osoby o2
WHERE o2.plec='K')
OR o.data_ur=
(SELECT MIN(o3.data_ur) FROM osoby o3
WHERE o3.plec='M');

--NAJM£ODSZA KOBIETA I NAJM£ODSZY MÊ¯CZYZNA--
SELECT * FROM osoby o
WHERE o.data_ur=ANY
(SELECT MAX(o2.data_ur) FROM osoby o2 
WHERE o.plec=o2.plec);

--WYDZIA£, NA KTÓRYM JEST NAJWIÊCEJ AKTUALNIE ZATRUDNIONYCH PRACOWNIKÓW/OSÓB--
SELECT w.nazwa, COUNT(z.id_osoby) FROM wydzialy w, zatrudnienia z
WHERE w.id=z.id_wydzialy
GROUP BY w.nazwa
HAVING COUNT(z.id_osoby) IN (SELECT MAX(COUNT(z2.id_osoby)) FROM zatrudnienia z2
GROUP BY z2.id_wydzialy);

--WYPISAÆ OSOBY, KTÓRE MIA£Y ZMIENION¥ UMOWÊ O ZATRUDNIENIU (W OPARCIU O ILOŒÆ WPISÓW W TABELI ZATRUDNIENIA)--
SELECT o.id FROM osoby o, zatrudnienia z
WHERE o.id=z.id_osoby
GROUP BY o.id
HAVING COUNT(z.id_osoby) > 1;

--NAJSTARSZA KOBIERA Z KA¯DEGO WYDZIA£U--
SELECT o.* FROM osoby o, zatrudnienia z, wydzialy w
WHERE o.id=z.id_osoby
AND o.plec='K'
AND z.id_wydzialy=w.id
AND o.data_ur=
(SELECT MIN(o2.data_ur) FROM osoby o2, wydzialy w2, zatrudnienia z2
WHERE o2.id=z2.id_osoby
AND o2.plec='K'
AND z2.id_wydzialy=w2.id
AND w2.nazwa=w.nazwa);

--------------------------------------------------------------------------------------------------------------------

--A (Wyœwietla osoby obecnie zatrudnione z pensj¹ wiêksz¹ ni¿ 2000 i mniejsz¹ ni¿ 3000)
SELECT * FROM OSOBY
JOIN ZATRUDNIENIA ON ZATRUDNIENIA.ID_OSOBY = OSOBY.ID
JOIN PENSJE ON PENSJE.id_osoby = OSOBY.ID
WHERE ZATRUDNIENIA.DO IS NULL
AND (PENSJE.PENSJA > 2000 AND PENSJE.PENSJA <3000)
ORDER BY DATA_UR;

--B
SELECT TRUNC(SUM(TO_CHAR(SYSDATE-DATA_UR)/365)/COUNT(*),0) SREDNI_WIEK FROM OSOBY
JOIN ZATRUDNIENIA ON ZATRUDNIENIA.ID_OSOBY = OSOBY.ID
WHERE ID_OSOBY NOT IN (SELECT ID_OSOBY FROM OSOBY
JOIN ZATRUDNIENIA ON ZATRUDNIENIA.ID_OSOBY = OSOBY.ID
WHERE (ZATRUDNIENIA.OD < SYSDATE AND (ZATRUDNIENIA.DO IS NULL OR ZATRUDNIENIA.DO > SYSDATE)));

--C (Wyœwietla pensjê mê¿czyzny starszego od podanej daty z jedn¹ pensj¹)
SELECT * FROM
(SELECT PENSJA FROM PENSJE
JOIN OSOBY ON ID_OSOBY = OSOBY.ID
WHERE OSOBY.PLEC = 'M'
AND DATA_UR < TO_DATE('10.10.1990', 'DD.MM.YYYY')
ORDER BY pensje.pensja DESC)
WHERE ROWNUM < 2;

--D (Wyœwietla ID wydzia³u oraz liczbê osób, gdzie ich jest najmniej zatrudnionych)
SELECT * FROM
(SELECT ID_WYDZIALY,COUNT(*) ILOSC_OSBOB FROM ZATRUDNIENIA
GROUP BY ID_WYDZIALY
ORDER BY ILOSC_OSBOB ASC)
WHERE ROWNUM <2;

--E (Wyœwietla kobietê zatrudnion¹ na wydziale fizyki)
SELECT * FROM OSOBY
WHERE PLEC = 'K'
AND ID IN
(SELECT ZATRUDNIENIA.ID_OSOBY FROM ZATRUDNIENIA
JOIN WYDZIALY ON WYDZIALY.ID = ZATRUDNIENIA.ID_WYDZIALY
WHERE WYDZIALY.ID IN (SELECT ID FROM WYDZIALY
WHERE LOWER(NAZWA) LIKE LOWER('FIZYKI'))
AND (ZATRUDNIENIA.DO IS NULL));

--F (Wyœwietla osoby z jedn¹ umow¹)
SELECT * FROM OSOBY
WHERE ID IN
(SELECT ID_OSOBY FROM
(SELECT ID_OSOBY, COUNT(*) ILOSC_UMOW FROM ZATRUDNIENIA
GROUP BY ID_OSOBY)
WHERE ILOSC_UMOW <2);

--G (Wyœwietla 5 osób, które posiadaj¹ drugie imiê i maj¹ krótkie pierwsze imiona)
SELECT * FROM
(SELECT * FROM OSOBY
WHERE IMIE2 IS NOT NULL
ORDER BY LENGTH(IMIE1) DESC)
WHERE ROWNUM < 6;

--H (Wyœwietla najstarsze zatrudnione osoby na wszystkich wydzia³ach)
SELECT * FROM OSOBY
WHERE DATA_UR IN (SELECT MIN(DATA_UR) FROM OSOBY
JOIN ZATRUDNIENIA ON OSOBY.ID = ZATRUDNIENIA.ID_OSOBY
GROUP BY ID_WYDZIALY);

--I (Wyœwietla id oraz nazwê wydzia³u, gdzie pracuje kobieta) DO DOKONCZENIA ; JEDEN DZAIAL MA '0' KOBIET WRRRR
SELECT * FROM WYDZIALY
WHERE ID NOT IN
(SELECT WYDZIALY.ID FROM ZATRUDNIENIA
JOIN OSOBY ON OSOBY.ID = ZATRUDNIENIA.ID_OSOBY
JOIN WYDZIALY ON ZATRUDNIENIA.ID_WYDZIALY = WYDZIALY.ID
WHERE ZATRUDNIENIA.DO IS NULL
AND PLEC = 'K'
GROUP BY WYDZIALY.ID);
--OSZUKANE
SELECT NVL2(COUNT(*),COUNT(*),0),ID_WYDZIALY FROM ZATRUDNIENIA
JOIN OSOBY ON OSOBY.ID = ZATRUDNIENIA.ID_OSOBY
WHERE PLEC = 'K'
AND (ZATRUDNIENIA.OD < SYSDATE AND (ZATRUDNIENIA.DO IS NULL OR ZATRUDNIENIA.DO > SYSDATE))
GROUP BY ID_WYDZIALY;

--J
SELECT (MAX(NVL2(DO,DO,SYSDATE)-OD)-MIN(NVL2(DO,DO,SYSDATE)-OD))/365 LAT_DLUZEJ FROM OSOBY
JOIN ZATRUDNIENIA ON ZATRUDNIENIA.ID_OSOBY = OSOBY.ID
WHERE (ZATRUDNIENIA.OD < SYSDATE AND (ZATRUDNIENIA.DO IS NULL OR ZATRUDNIENIA.DO > SYSDATE));

--K
SELECT * FROM OSOBY
WHERE ID IN (
SELECT ID_OSOBY FROM ZATRUDNIENIA
WHERE OD > (SELECT * FROM
(SELECT DATA_UR FROM OSOBY
WHERE ID IN (SELECT SZEF FROM WYDZIALY)
ORDER BY DATA_UR DESC)
WHERE ROWNUM <2)
GROUP BY ID_OSOBY);

--L
SELECT * FROM
(SELECT COUNT(*) "ILOSC WYPOWIEDZIANYCH",MON FROM
(SELECT to_char( DO, 'MON' ) MON FROM ZATRUDNIENIA)
WHERE MON IS NOT NULL
GROUP BY MON
ORDER BY MON)
WHERE ROWNUM <2;

--M (Wyœwietla nazwiska osób dodane z ma³ych liter)
SELECT ID, LOWER(NAZWISKO) AS "male nazwisko" FROM OSOBY
WHERE ID IN (1,2,3);

--N (Wyœwietla trzeci¹ literê nazwy wydzia³u)
SELECT SUBSTR(NAZWA,3,1) AS "SRODKOWA" FROM WYDZIALY;

--A (Wyœwietla osoby urodzone przez 1987 rokiem oraz nadal zatrudnione)
select imie1, imie2, nazwisko, data_ur, plec
from osoby o, pensje p
where o.id=p.id_osoby
and p.do is not null
and TO_NUMBER(TO_CHAR(data_ur,'yyyy'))<1987
order by plec;
 
--B (Wyœwietla iloœæ zatrudnionych dni osób z wydzia³u informatyki)
select o.id, o.nazwisko, round(sysdate - z.od) as dni
from osoby o, wydzialy w, zatrudnienia z
where o.id=z.id_osoby
and w.id=z.id_wydzialy
and w.nazwa='informatyki'
and z.do is null;
 
--C (Wyœwietla œredni¹ pensjê mê¿czyzn, którzy ju¿ nie pracuj¹)
select round(avg(pensja)) as avg_salary
from pensje p, osoby o
where o.id=p.id_osoby
and p.do is not null
and o.plec = 'M';
 
--E (Wyœwietla najm³odzsz¹ osobê zatrudnion¹ na wydziale o id=2)
select o.imie1, o.imie2, o.nazwisko, o.data_ur, o.plec
from osoby o, zatrudnienia z
where
(select max(o.data_ur) from
osoby o, zatrudnienia z
where o.id=z.id_osoby
and id_wydzialy=2)=data_ur
and z.id_osoby=o.id
and id_wydzialy=2;
 
--F (Wyœwietla osoby zatrudnione)
select o.imie1, o.imie2, o.nazwisko, o.data_ur, o.plec
from osoby o, zatrudnienia z
where o.id=z.id_osoby
and z.do is null;
 
--G (Wyœwietla osoby o trzech najkrótszych nazwiskach)
select * from
osoby o, (select id
from osoby
order by length(nazwisko)) l
where o.id=l.id
and rownum<=3;
 
--H (Wyœwietla najstarsze zatrudnione kobiety)
select * from osoby where data_ur in (
select min(data_ur) from
(select *
from osoby o, zatrudnienia z
where z.id_osoby=o.id
and plec = 'K')
group by id_wydzialy);

--J (Wyœwietla najd³u¿sze kiedyœ trwaj¹ce zatrudnienie)
select round(((b.max-a.min)/365)) zaokrogona_roznica_lat, (b.max-a.min) roznica_dni from
(select * from
(select round(do-od) min
from zatrudnienia
where do is not null
order by round(do-od))
where rownum=1) a, (select * from
(select round(do-od) max
from zatrudnienia
where do is not null
order by round(do-od) desc)
where rownum=1) b;
 
--K (Wyœwietla szefów wydzia³ów)
select o.imie1, o.imie2, o.nazwisko, o.data_ur
from osoby o, zatrudnienia z
where o.id=z.id_osoby
and to_char(z.od,'MM-DD')>(select to_char(data_ur,'MM-DD') from
(select data_ur from
osoby o, wydzialy w
where w.szef=o.id
order by data_ur)
where rownum = 1);
 
--L (Najd³u¿ej zatrudniony pracownik - ile jest to miesiêcy)
select miesiac from (
select to_char(do,'MM') as miesiac, count(to_char(do,'MM')) as a
from zatrudnienia
where do is not null
group by to_char(do,'MM')
order by a desc)
where rownum = 1;
 
--N (?)
select nazwa as DUZA_LITERA from
(select id, substr(nazwa,2,1) from wydzialy
where substr(nazwa,2,1)='i') i, wydzialy w
where i.id=w.id;

--------------------------------------------------------------------------------------------------------------------

1. Tworzenie tabeli
CREATE TABLE testowa
(id NUMBER(2),
nazwa VARCHAR2(15)
);

2. Zmiana nazwy tabeli
RENAME testowa TO test1;

3. Polecenie do wstawiania danych
INSERT INTO test1
(id, nazwa) VALUES
(1,'krowa');

INSERT INTO test1
VALUES (2,'koñ');

INSERT INTO test1(nazwa)
VALUES('lew');

INSERT INTO test1
VALUES(4,NULL);

INSERT INTO test1
VALUES(2,'lis');

a) Wyœwietla wybrane atrybuty
SELECT id, nazwa
FROM test1;

b) Wyœwietla nazwy
SELECT nazwa 
FROM test1;

c) Wyœwietla wszystko
SELECT *
FROM test1;

4. Kopiowanie zawartoœci jednej tabeli do drugiej (DISTINCT - wyodrêbnij)
CREATE TABLE test2
(id NUMBER(2),
nazwa VARCHAR2(15)
);

INSERT INTO test2
SELECT * FROM test1;
SELECT DISTINCT nazwa
FROM test1;

5. Tworzenie tabeli i od razu jej uzupe³nienie danymi (na podobieñstwo tabeli 2.)
CREATE TABLE test3
AS SELECT * FROM test2;

6. Czyszcznie danych z tabeli
TRUNCATE TABLE test1;

7. Usuwanie tabeli
DROP TABLE test1;

--------------------------------------------------------------------------------------------------------------------
Tworzenie tabel
CREATE TABLE osoby
(id NUMBER(2) CONSTRAINT osobypk PRIMARY KEY,
nazwisko VARCHAR2(15) NOT NULL,
imie1 VARCHAR2(15) NOT NULL,
imie2 VARCHAR2(15),
dataur DATE NOT NULL,
plec CHAR NOT NULL CHECK (plec='K' or plec='M')
);

CREATE TABLE pensje
(id NUMBER(2) CONSTRAINT pensjepk PRIMARY KEY,
id_osoby NUMBER(2),
od DATE NOT NULL,
do DATE,
pensja NUMBER(2) NOT NULL,
CONSTRAINT osoby_fkpensje FOREIGN KEY
(id_osoby) REFERENCES osoby (id)
);

CREATE TABLE wydzialy
(id NUMBER(2) CONSTRAINT wydzialy_pk PRIMARY KEY,
nazwa VARCHAR2(15) NOT NULL UNIQUE,
szef NUMBER(2),
CONSTRAINT wydzialy_fk FOREIGN KEY
(szef) REFERENCES osoby (id)
);

CREATE TABLE zatrudnienie
(id NUMBER(5) CONSTRAINT zatrudnienie_pk PRIMARY KEY,
od DATE NOT NULL,
do DATE,
id_osoby NUMBER(2),
id_wydzialy NUMBER(5),
CONSTRAINT zatrudnienie_fk FOREIGN KEY
(id_osoby) REFERENCES osoby (id),
CONSTRAINT zatrudnienie_fk_wydzialy FOREIGN KEY
(id_wydzialy) REFERENCES wydzialy (id)
);